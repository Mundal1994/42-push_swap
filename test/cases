./checker 4 7 8 3 9 1 0 10 5 6 2
pb
rra
pb
rr
ra
pb
ss
pb
rr
pb
rr
pa
pa
pa
pa
pa
OK




./checker -1 7 -7 -3 5 -2 0 2 -8
pb
sa
pb
ss
pb
ss
rra
pb
rrr
rrr
rrr
pa
sa
pa
pa
pa



ARG="4 67 3 87 23"; ./push_swap $ARG | wc -l

ARG="4 67 3 87 23"; ./push_swap $ARG | ./checker $ARG

ARG="2 0 1 3 4 5 6 7 8 9 10"; ./push_swap $ARG | wc -l

ARG="2 0 1 3 4 5 6 7 8 9 10"; ./push_swap $ARG | wc -l


./checker 4 "5 6" 7 8 9 "10 11"

./checker "1" 2 3 4 5 " -"

./checker "1" 2 3 4 5 "    "

./checker "1" 2 3 4 5 " "

./checker "1" 2 3 4 5 ""

ARG="2 -50 1 5 6 7 8 9 10 11 12 13"; ./push_swap $ARG | ./checker $ARG


ARG="2 -50 1 5 3 4 6 9 10 11 12 13"; ./push_swap $ARG | ./checker $ARG
ARG="2 -50 1 5 6 7 8 9 10 11 12 13"; ./push_swap $ARG | wc -l
       4




ARG="2 0 1 5 3 4 6 9 10 11 12 13"; ./push_swap $ARG | ./checker $ARG
OK
ARG="2 0 1 5 3 4 6 9 10 11 12 13"; ./push_swap $ARG | wc -l
      11

ARG="2 0 1 5 3 4 6 9 10 11 12 13"; ./push_swap $ARG | ./checker $ARG

ARG="2 0 1 5 3 4 6 9 10 11 12 13"; ./push_swap $ARG | wc -l


./checker 5 3 6 4 2 0 1
ra
pb
ra
pb
pb
rr
ra
pa
pa
pa
rra
rra
OK


./push_swap 1 3 2 4 5
rra
pb
pb
ss
pa
ra
pa

7



./checker -5 8 -6 9 -9 10 2 3 1 4 0 -4 5 -8
rra
pb
pb
rra
rra
pb
rra
pb
rra
rra
pb
rra
rra
rra
pb
rra
pb
rb
rra
rra
sa
ra
pa
ra
ra
pa
pa
pa
pa
rra
pa
pa

32



./checker 5 2 3 1 4
ARG="5 2 3 1 4"; ./push_swap $ARG | ./checker $ARG




./push_swap 1 4 2 3 6 5
ARG="1 4 2 3 6 5"; ./push_swap $ARG | ./checker $ARG


./push_swap 1 4 2 6 3 5
ARG="1 4 2 6 3 5"; ./push_swap $ARG | ./checker $ARG

./push_swap 1 4 2 6 3 5
ARG="1 4 2 6 3 5"; ./push_swap $ARG | ./checker $ARG
9

ARG="5 3 2 1 6 4"; ./push_swap $ARG

ARG="15 3 6 2 1 4 5 7 10 11 8 13 9 14"; ./push_swap $ARG
ARG="10 -3 2 -4 -8 -2 1 3 6 7 4 8 5 9"; ./push_swap $ARG


15 10
3  -3
6  2
2  -4
1  -8
4  -2
5  1
7  3
10 6
11 7
8  4
13 8
9  5
14 9


ARG="2 1 3 5 4 8 10 9 7 -50 -20 6"; ./push_swap $ARG | ./checker $ARG

ARG="30 20 4 10 -9 3 -7 50 22 100"; ./push_swap $ARG | ./checker $ARG


ARG="30 20 4 10 -10 11 12 31 50 3 100 5"; ./push_swap $ARG

ARG="7 6 1 3 -3 4 5 8 9 -2 10 2"; ./push_swap $ARG

3 4 2 1 5








ARG="6 5 8 7 1 9 4 2 3 10"; ./push_swap $ARG


new method
22


ARG="9 8 2 7 10 3 4 5 6 1"; ./push_swap $ARG
22



biggest of the two top numbers becomes the number we sort around
everything bigger than that number will be pushed to the right unless bottom number is bigger




ARG="2 3 1 7 9 8 4 10 6 5"; ./push_swap $ARG

29

25


34

28


21







ARG="8 7 3 10 5 2 6 1 4 9"; ./push_swap $ARG


find middle and split in half - anything below the number goes to other stack
25



choose number - sort around it
24


old method



ARG="11 112 56 289 249 5 95 219 180 288 32 159 18 222 155 3 189 88 212 49 23 13 6 15 242 92 205 133 244 67 29 28 102 97 229 162 85 267 45 210 278 277 250 146 172 169 203 218 76 103 293 128 208 173 225 253 87 127 254 195 104 224 197 99 271 186 188 198 167 191 57 89 80 16 234 279 136 48 290 265 143 248 247 163 200 129 226 154 168 60 19 257 58 252 141 204 176 156 164 196"; ./push_swap $ARG



ARG="5 8 1 6 3 2 7 9 4 10"; ./push_swap $ARG

new method
31


old method
21


23


quicksortish
21



ARG="1 10 3 7 9 5 4 6 8 2"; ./push_swap $ARG


new
24

old method
28


ARG="-2 -6 3 7 5 -7 4 1 -1 -4 10 0 -8 2 -5 8 9 -3 6"; ./push_swap $ARG

new
(check at top or bottom thingy if can switch) everything but ordered stuff gets either switched and pushed to the bottom
(maybe if the top is smaller than the closest ordered part) we will order it so the closest ordered part will get longer?
74
62


old
66-76... lost count


./push_swap 2 1 3 4 6 7 5


ARG="-12 -17 10 24 -47 31 7 -21 -48 -40 -30 -22 38 30 -33 48 -36 -2 11 -43 14 -41 42 5 -9 -42 3 21 46 -32 -1 -45 -8 23 29 -35 36 -46 9 -25 -16 33 -24 43 -44 27 -14 49 -34 -18 -7 41 45 13 50 8 19 32 4 -31 -3 -10 34 -19 -6 -27 25 -39 -28 -49 47 37 28 -23 39 -26 6 -37 -11 1 15 -50 -5 44 -20 35 22 20 16 -13 -15 18 12 0 -29 38 -4 2 40 26 17"; ./push_swap $ARG





New version
ARG="-46 -5 -47 5 6 42 -35 35 -25 -31 43 36 44 21 -33 29 -13 45 -11 -10 22 50 -17 1 25 -3 -8 17 -44 -38 -22 31 -6 0 7 3 48 -20 -37 8 32 -28 15 41 19 -30 13 27 23 28 47 10 37 4 2 24 49 -18 12 -49 20 -40 14 -2 -4 -1 38 -16 16 -50 -32 -14 -7 -21 -29 18 -43 -9 11 -36 46 -15 -34 -24 -26 -27 40 -39 26 30 -19 9 -42 -48 39 -12 -45 33 34 -41 -23"; ./push_swap $ARG | wc -l
	738


ARG="11 112 56 289 249 5 95 219 180 288 32 159 18 222 155 3 189 88 212 49 23 13 6 15 242 92 205 133 244 67 29 28 102 97 229 162 85 267 45 210 278 277 250 146 172 169 203 218 76 103 293 128 208 173 225 253 87 127 254 195 104 224 197 99 271 186 188 198 167 191 57 89 80 16 234 279 136 48 290 265 143 248 247 163 200 129 226 154 168 60 19 257 58 252 141 204 176 156 164 196"; ./push_swap $ARG | wc -l
	709

ARG="253 31 277 141 44 76 110 281 109 60 289 238 280 117 269 275 175 245 69 47 8 177 230 89 178 190 294 217 25 32 148 161 191 288 138 149 265 176 49 193 164 263 201 272 113 129 179 260 37 7 158 28 105 130 72 189 115 212 142 168 123 284 157 194 204 88 209 151 84 19 199 218 107 125 247 262 233 215 98 59 55 271 159 283 299 132 259 39 36 184 134 100 112 71 101 10 296 99 172 162"; ./push_swap $ARG
	749

ARG="726 794 761 317 393 422 67 728 61 154 111 201 122 259 267 457 467 285 78 251 296 677 214 585 350 792 476 216 633 323 721 376 355 156 149 573 53 619 636 469 424 148 710 205 225 551 353 222 565 406 436 717 506 198 538 773 711 235 211 10 532 414 449 159 54 750 480 344 38 531 272 533 487 709 137 558 378 203 213 741 733 748 94 269 583 385 618 520 374 108 62 151 215 143 523 495 76 164 591 793 653 448 261 734 312 357 453 39 580 689 157 155 753 217 593 614 642 570 625 274 763 404 334 339 176 90 454 492 420 252 731 120 341 586 75 320 597 686 662 46 620 26 227 547 616 394 382 70 694 445 743 459 545 631 6 346 441 638 130 221 672 609 439 244 370 434 458 27 485 229 379 294 526 433 707 147 264 603 541 440 228 739 715 29 74 256 364 588 499 766 650 790 483 48 444 351 121 14 56 658 652 0 51 185 421 621 237 403 315 220 575 163 248 426 498 690 675 80 286 456 654 708 640 507 21 17 732 589 400 596 549 398 190 599 797 657 705 166 302 161 729 443 3 497 336 273 605 478 328 361 276 8 684 429 292 387 105 204 107 186 613 35 568 402 381 349 791 397 411 700 527 666 9 258 299 601 206 425 388 447 722 504 279 41 540 192 96 542 765 79 40 181 199 405 594 564 607 145 634 706 129 566 113 340 464 466 58 519 544 771 692 693 84 515 45 517 52 360 783 246 169 158 47 410 683 543 516 103 69 193 529 546 490 762 749 305 521 124 584 465 293 72 712 303 162 182 754 742 298 431 165 195 751 500 427 514 438 511 787 774 668 13 768 681 488 231 637 468 417 141 36 557 656 209 647 559 556 281 191 612 735 189 718 179 100 800 510 371 740 704 475 363 553 234 265 669 197 362 408 676 304 646 581 255 247 219 291 321 4 535 474 19 622 208 224 260 160 23 442 173 180 678 331 446 99 554 788 401 271 373 552 338 737 491 770 171 641 126 673 194 188 37 691 367 472 746 563 419 644 319 664 416 562 153 738 31 183 674 7 218 242 262 655 759 318 207 324 16 550 776 289 736 15 462 49 270 57 518 226 102 329 232 767 263 687 223 461 348 665 30 758 576 587 590 496 699 579 392 648 415"; ./push_swap $ARG
	8914




I can add logic of rotating at the same time (something i have completely forgotten)

maybe make prediction of where to rotate next and if it fits the same direction as the other stack has to go to find the correct position -rotate it at the same time

that logic can be added both when initially pushing to stack b because if the nbr is smaller than small_low
i know i have to do rb so i might as well check if it on stack a there is a middle number because then I will push it to the bottom
