#!/bin/bash
MYPATH="/Users/molesen/Desktop/Hive/swap"
command -v $MYPATH/push_swap >/dev/null 2>&1 || { printf "\npush_swap not found!\n"; exit 1; }
command -v $MYPATH/checker >/dev/null 2>&1 || { printf "\nchecker not found!\n"; exit 1; }
LOCALPATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# colors
BOLD="\033[1m"
RED="\033[0;31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
PURPLE="\033[35m"
CYAN="\033[36m"
UNCOLOR="\033[0m"

# $1: i
function error_put()
{
	printf "EXPECTED OUTPUT: Error"
	printf "\nYOUR OUTPUT IS: "
}

function valid_put()
{
	printf "\nEXPECTED OUTPUT: "
	printf "OK"
	printf "\nYOUR OUTPUT IS:"
}

function number_put()
{
	printf "\nEXPECTED OUTPUT: "
	printf "OK"
	printf "\nYOUR OUTPUT IS:"
}

# $1: type test $2: nbr input $3: var2 $5: fnctn error
function test()
{
	printf "\n$1 test: ${YELLOW}[$2]${UNCOLOR}\n"
	var2=$($3)
	if [ "$var2" == "Error" ]
	then
		var=$((ARG=$2; ${MYPATH}/checker $ARG) 2>&1 >/dev/null)
	else
		var=$((ARG=$2; ${MYPATH}/push_swap $ARG | ${MYPATH}/checker $ARG) 2>&-)
	fi
	if [ "$var" != "$var2" ]
	then
		printf "\n${RED}fail: ${UNCOLOR}\n"
		$4
		printf "$var\n"
	else
		printf "$var\n"
		printf "		${GREEN}ok${UNCOLOR}\n"
	fi
}

function error_test()
{
	printf "\n${PURPLE}${BOLD}Error tests${UNCOLOR}\n"

	# non numeric parameters
	printf "\n${BLUE}non numeric tests${UNCOLOR}"
	test invalid "10 one 25 2" "printf "Error"" error_put
	test invalid "hello my name is" "printf "Error"" error_put

	#duplicate parameters
	printf "\n${BLUE}duplicates tests${UNCOLOR}"
	test invalid "10 2 25 2" "printf "Error"" error_put
	test invalid "10 2 25 3 5 70 1 2 32 52 10 11" "printf "Error"" error_put
	test invalid "10 2 25 1 2 4 3" "printf "Error"" error_put

	#greater than MAXINT parameters
	printf "\n${BLUE}greater than MAXINT tests${UNCOLOR}"
	test invalid "10 2 25 -2147483649 7 -8" "printf "Error"" error_put
	test invalid "10 2 25 -2147483650 5 11" "printf "Error"" error_put
	test invalid "10 2 25 -214748365155020151 5 11" "printf "Error"" error_put
	test invalid "10 2 25 2147483648 7 800" "printf "Error"" error_put
	test invalid "10 2 25 200 2147483650 4210 45" "printf "Error"" error_put
	test invalid "10 2 25 200 21474836500005 4210 45" "printf "Error"" error_put
}

function valid_test()
{
	printf "\n${PURPLE}${BOLD}Valid tests${UNCOLOR}\n"

	#simple test
	printf "\n${BLUE}simple tests${UNCOLOR}"
	test valid "10 2 25" "printf "OK"" valid_put
	test valid "2 1 0" "printf "OK"" valid_put

	#big numbers
	printf "\n${BLUE}big number tests${UNCOLOR}"
	test valid "10 2 2147483647" "printf "OK"" valid_put
	test valid "10 -2147483648 25" "printf "OK"" valid_put
	test valid "10 2 2147483640" "printf "OK"" valid_put
	test valid "10 -2147483640 25" "printf "OK"" valid_put

	#more nbr test
	printf "\n${BLUE}more nbr tests${UNCOLOR}"
	test valid "-2 -6 3 7 5 -7 4 1 -1 -4 10 0 -8 2 -5 8 9 -3 6" "printf "OK"" valid_put
	test valid "1 10 3 7 9 5 4 6 8 2" "printf "OK"" valid_put
	test valid "5 8 1 6 3 2 7 9 4 10" "printf "OK"" valid_put
	test valid "11 112 56 289 249 5 95 219 180 288 32 159 18 222 155 3 189 88 212 49 23 13 6 15 242 92 205 133 244 67 29 28 102 97 229 162 85 267 45 210 278 277 250 146 172 169 203 218 76 103 293 128 208 173 225 253 87 127 254 195 104 224 197 99 271 186 188 198 167 191 57 89 80 16 234 279 136 48 290 265 143 248 247 163 200 129 226 154 168 60 19 257 58 252 141 204 176 156 164 196" "printf "OK"" valid_put
	test valid "8 7 3 10 5 2 6 1 4 9" "printf "OK"" valid_put
	test valid "9 8 2 7 10 3 4 5 6 1" "printf "OK"" valid_put
	test valid "2 3 1 7 9 8 4 10 6 5" "printf "OK"" valid_put
	test valid "6 5 8 7 1 9 4 2 3 10" "printf "OK"" valid_put
	test valid "7 6 1 3 -3 4 5 8 9 -2 10 2" "printf "OK"" valid_put
	test valid "30 20 4 10 -10 11 12 31 50 3 100 5" "printf "OK"" valid_put
	test valid "30 20 4 10 -9 3 -7 50 22 100" "printf "OK"" valid_put
	test valid "2 1 3 5 4 8 10 9 7 -50 -20 6" "printf "OK"" valid_put
	test valid "10 -3 2 -4 -8 -2 1 3 6 7 4 8 5 9" "printf "OK"" valid_put
	test valid "15 3 6 2 1 4 5 7 10 11 8 13 9 14" "printf "OK"" valid_put
	test valid "5 3 2 1 6 4" "printf "OK"" valid_put
	test valid "1 4 2 6 3 5" "printf "OK"" valid_put
	test valid "1 4 2 3 6 5" "printf "OK"" valid_put
	test valid "2 0 1 3 4 5 6 7 8 9 10" "printf "OK"" valid_put
	test valid "-5 8 -6 9 -9 10 2 3 1 4 0 -4 5 -8" "printf "OK"" valid_put
	test valid "2 -50 1 5 6 7 8 9 10 11 12 13" "printf "OK"" valid_put
	test valid "2 0 1 5 3 4 6 9 10 11 12 13" "printf "OK"" valid_put
	test valid "5 3 6 4 2 0 1" "printf "OK"" valid_put
}


# $1: type test $2: example $3: number of test arg $4: var2 $5: 1 if var2 take i for arg, else 0 $6 fnctn error
function op_test()
{
	nbr=50
	printf "\n$1 test: ${YELLOW}[$2]${UNCOLOR}\n"
	var2=$($3)
	var=$((ARG=$2; ${MYPATH}/push_swap $ARG | wc -l) 2>&-)
	var3=$((ARG=$2; ${MYPATH}/push_swap $ARG | ${MYPATH}/checker $ARG) 2>&-)
	if [ "$var3" != "OK" ];
	then
		printf "\n${RED}numbers not sorted correctly${UNCOLOR}\n"
		var=$((${var2}+1))
	fi
	if (( $var > $var2 ));
	then
		printf "\n${RED}fail: ${UNCOLOR}\n"
		printf "\nEXPECTED OUTPUT: less or equal to ${var2}"
		printf "\nYOUR COUNT IS:"
		printf "$var\n"
	else
		printf "$var\n"
		printf "		${GREEN}ok${UNCOLOR}\n"
	fi
}

function operation_test()
{
	printf "\n${PURPLE}${BOLD}Operation tests${UNCOLOR}\n"

	#already sorted test
	printf "\n${BLUE}already sorted tests${UNCOLOR}"
	op_test wc-l "42" "printf "0""
	op_test wc-l "0 1 2 3" "printf "0""
	op_test wc-l "0 1 2 3 4 5 6 7 8 9" "printf "0""
	op_test wc-l "1 2 3 4 5" "printf "0""
	op_test wc-l "2 4 6 8 10 12" "printf "0""

	#simple test
	printf "\n${BLUE}simple tests${UNCOLOR}"
	op_test wc-l "2 1 0" "printf "3""

	#five number test
	printf "\n${BLUE}5 number tests${UNCOLOR}"
	op_test wc-l "1 5 2 4 3" "printf "12""
	op_test wc-l "1 2 3 5 4" "printf "12""
	op_test wc-l "5 4 3 2 1" "printf "12""
	op_test wc-l "5 4 3 1 2" "printf "12""
	op_test wc-l "5 1 3 4 2" "printf "12""
	op_test wc-l "3 4 1 2 5" "printf "12""
	op_test wc-l "2 3 1 5 4" "printf "12""
	op_test wc-l "4 3 1 5 2" "printf "12""
	op_test wc-l "4 67 3 87 23" "printf "12""
	op_test wc-l "5 2 3 1 4" "printf "12""

	#100 number test
	printf "\n${BLUE}100 number tests${UNCOLOR}"
	op_test wc-l "-46 -5 -47 5 6 42 -35 35 -25 -31 43 36 44 21 -33 29 -13 45 -11 -10 22 50 -17 1 25 -3 -8 17 -44 -38 -22 31 -6 0 7 3 48 -20 -37 8 32 -28 15 41 19 -30 13 27 23 28 47 10 37 4 2 24 49 -18 12 -49 20 -40 14 -2 -4 -1 38 -16 16 -50 -32 -14 -7 -21 -29 18 -43 -9 11 -36 46 -15 -34 -24 -26 -27 40 -39 26 30 -19 9 -42 -48 39 -12 -45 33 34 -41 -23" "printf "1500""
	op_test wc-l "11 112 56 289 249 5 95 219 180 288 32 159 18 222 155 3 189 88 212 49 23 13 6 15 242 92 205 133 244 67 29 28 102 97 229 162 85 267 45 210 278 277 250 146 172 169 203 218 76 103 293 128 208 173 225 253 87 127 254 195 104 224 197 99 271 186 188 198 167 191 57 89 80 16 234 279 136 48 290 265 143 248 247 163 200 129 226 154 168 60 19 257 58 252 141 204 176 156 164 196" "printf "1500""
	op_test wc-l "253 31 277 141 44 76 110 281 109 60 289 238 280 117 269 275 175 245 69 47 8 177 230 89 178 190 294 217 25 32 148 161 191 288 138 149 265 176 49 193 164 263 201 272 113 129 179 260 37 7 158 28 105 130 72 189 115 212 142 168 123 284 157 194 204 88 209 151 84 19 199 218 107 125 247 262 233 215 98 59 55 271 159 283 299 132 259 39 36 184 134 100 112 71 101 10 296 99 172 162" "printf "1500""
	op_test wc-l "-5 -46 26 3 29 11 -40 45 -41 -26 -31 -35 -27 23 -17 44 -11 -30 -32 39 42 46 -28 48 -21 -2 31 49 9 -23 -6 15 -39 35 -25 10 41 -43 -16 -50 37 14 -45 -37 -48 0 5 -29 28 7 50 -10 25 38 36 -14 -42 -15 -33 43 -22 34 -24 21 -38 18 -12 -18 22 -1 4 -47 -9 8 17 -34 -44 47 32 -3 -8 19 30 -4 -49 24 13 16 1 33 -36 20 -7 27 -13 6 12 2 40 -20" "printf "1500""
	op_test wc-l "-18 -36 -19 19 -43 -4 50 -9 -15 -2 38 -28 37 -29 17 -42 -37 12 -16 2 39 -23 -47 -27 -31 -50 -44 22 -30 26 -3 16 49 20 -41 30 -25 8 25 -49 -7 -21 -39 14 27 32 21 33 -24 28 31 10 45 43 40 -17 1 -32 23 29 9 -1 -35 -10 24 -48 44 6 -22 3 0 47 11 36 41 48 34 -6 18 13 46 -34 5 -46 7 -45 -12 35 -38 -14 -8 -11 -33 -20 4 15 -26 42 -40 -5" "printf "1500""
	op_test wc-l "-33 -22 -34 0 -42 39 9 4 18 -40 -15 -12 -41 38 31 -25 19 22 15 -24 35 42 32 1 46 -36 -6 -37 23 14 -5 -28 43 -27 48 8 -23 -21 -38 -50 -9 -35 34 -18 29 -14 -8 -45 -43 25 20 30 10 -31 11 17 -2 45 -49 -26 2 -19 -16 5 47 36 -29 -32 -11 12 -47 24 40 -17 13 -30 -10 27 50 7 26 -44 37 44 41 -20 49 -46 -48 33 28 -1 -7 6 21 -4 -13 -39 16 3" "printf "1500""
	op_test wc-l "-85 -113 44 -68 -118 49 227 -206 -180 184 -194 -247 -71 -63 207 -39 65 83 111 242 -200 -184 -227 -7 -41 88 102 139 138 217 132 -103 29 -151 125 152 -210 112 -174 -116 229 -1 54 4 -18 168 9 -152 -111 -228 -95 130 -96 -192 -80 211 248 143 219 154 -26 -181 131 -16 -134 -203 -10 -9 27 -225 -121 -241 -92 -132 40 165 -143 -57 67 208 11 -38 69 -36 180 -216 74 193 99 -226 215 92 -165 173 -155 -183 -6 147 -20 120" "printf "1500""
	op_test wc-l "235 135 14 147 -34 187 8 89 246 62 11 -154 233 38 -140 -89 160 -178 -86 -177 -191 46 24 -239 -96 128 81 88 -85 52 -161 236 142 114 42 -84 -130 -238 -102 133 -124 -45 247 231 162 -98 -72 -204 68 71 -12 171 182 206 199 77 15 -49 109 -48 -47 36 61 136 -44 186 -209 165 164 176 -148 112 22 170 9 148 -91 185 -188 -247 -226 222 -181 -106 118 -138 -196 -113 -144 204 130 -155 194 -169 195 -121 -76 163 -183 41" "printf "1500""

	#500 number test
	printf "\n${BLUE}500 number tests${UNCOLOR}"
	op_test wc-lprintf "11500""
	op_test wc-l "190 195 368 187 489 103 352 239 151 196 112 332 123 29 185 242 171 246 51 267 378 289 243 401 136 56 492 456 276 66 351 193 270 232 487 453 444 441 422 135 58 182 258 406 5 466 288 20 207 436 152 269 240 477 64 100 68 76 431 499 1 10 491 95 376 265 348 412 250 93 300 177 162 176 33 32 459 442 166 49 307 273 408 132 216 463 390 344 315 284 291 205 57 80 153 89 54 296 374 369 345 313 118 209 155 14 346 23 158 189 129 261 324 91 440 311 36 341 30 19 458 387 37 399 178 252 393 409 303 294 350 373 247 461 117 42 221 411 24 498 257 218 186 79 474 147 31 421 438 254 282 366 379 397 105 55 192 330 142 59 361 460 148 365 22 439 45 427 53 255 277 280 228 451 134 116 305 372 197 382 28 138 133 220 488 70 340 302 99 377 391 395 146 46 111 7 263 297 72 386 229 44 233 308 333 285 41 85 418 224 191 2 495 210 485 468 400 417 375 328 27 334 473 298 109 396 490 159 360 96 416 11 211 69 108 262 316 479 420 367 259 283 90 419 410 50 318 223 199 470 476 371 128 39 462 172 12 299 174 150 106 321 455 161 249 226 398 235 75 407 63 414 497 131 471 424 248 293 413 119 353 356 448 203 290 304 268 384 86 48 359 238 494 213 319 310 385 71 486 124 355 281 126 402 140 483 143 3 322 279 163 168 454 156 38 98 206 180 113 104 389 349 301 433 380 323 17 363 52 447 35 165 107 9 253 97 169 78 496 475 292 405 432 430 40 26 188 227 347 423 94 295 13 256 354 67 25 43 484 175 478 336 149 429 120 358 101 82 327 314 428 179 394 342 198 62 236 219 264 388 481 73 339 404 202 0 130 469 426 81 403 92 204 184 482 88 320 102 208 241 287 181 144 173 357 47 312 329 493 237 325 464 244 201 465 61 127 266 443 271 77 18 222 450 480 370 449 125 472 343 4 139 215 74 15 121 164 245 115 425 437 278 83 217 141 212 331 275 87 60 214 309 34 446 381 137 272 170 65 435 183 337 383 84 234 467 457 326 6 16 364 251 194 392 8 274 154 415 157 317 21 452 434 286 145 445 306 500 230 167 260 200 335 110 160 231 362 225 338 114" "printf "11500""
	op_test wc-l "133 152 -155 50 158 119 -15 -9 172 -95 8 -124 212 -109 151 -54 -191 -176 41 -4 -104 -83 -107 -60 -223 -85 -34 -49 -204 -93 18 5 -156 -148 -40 -211 -52 -180 20 -203 106 -114 -189 23 59 -35 187 132 101 -214 -24 -198 -157 -113 235 -201 24 -127 227 25 -158 -183 102 83 -53 -86 -213 27 55 200 221 -216 -166 -141 -44 205 107 242 -122 -238 -42 -209 -200 -168 -18 6 39 -192 -126 94 63 180 215 -22 17 176 35 -138 237 -78 76 -58 -242 -159 143 210 169 -162 -125 -21 206 86 150 99 197 -187 -119 -161 -33 -164 -106 -100 148 184 -92 130 48 -217 -75 231 -103 -184 149 -228 -97 -23 -182 -41 77 -29 -11 -6 74 110 -136 37 -240 -57 45 -165 -224 201 95 7 -185 226 -10 214 -179 -112 -88 108 125 234 104 -94 249 240 -59 96 -116 -110 -181 156 -150 36 -32 -123 225 81 -20 66 219 122 -108 117 105 -234 162 -139 -19 68 178 -149 22 28 67 88 134 137 247 127 -194 21 -143 -132 33 -175 -235 -74 -38 92 72 207 220 12 -226 -68 -98 42 -111 194 -147 -131 239 47 223 -177 124 43 -2 -145 -31 65 109 164 97 -133 208 11 115 146 153 -215 141 165 -1 135 79 -67 129 -17 159 -199 -27 244 168 -89 87 -196 -221 -207 -230 121 114 188 161 -129 209 139 31 -72 100 30 173 241 160 80 -84 -30 211 -46 2 -222 144 174 -231 -28 -65 140 -233 -163 111 -193 -232 -45 3 58 -117 -190 157 -241 4 75 228 60 186 90 64 193 -48 198 -82 16 -99 196 -197 15 -3 -206 145 -76 -249 190 230 26 238 29 -250 -101 -160 -134 -220 -137 -120 243 -188 -237 53 -8 49 -50 -174 136 248 -96 147 -105 54 71 -178 -69 98 78 -63 -186 46 -77 202 -167 -14 222 19 -51 216 -55 229 34 57 38 -210 189 177 -245 56 -248 -227 -26 -25 0 13 -236 126 -64 10 32 40 -171 52 -7 166 175 -37 -13 203 -56 195 246 179 120 -66 233 163 -212 217 213 51 -61 142 -90 -135 -144 82 69 -12 -115 -170 131 -246 -5 103 -225 116 183 -239 250 -130 167 -39 113 138 14 -36 123 199 224 -73 -229 -153 91 -118 -87 84 1 -47 -247 -146 182 62 112 -172 -91 -16 -243 -152 -208 155 232 -140 170 -128 -62 -154 128 185 204 -151 245 192 -142 44 -70 191 171 70 -169 218 -102 89 -80 -244 -205 -43 -202 -195 9 -71 154 85 181 -173 -219 118 -218 61 -81 93 -79 73 236" "printf "11500""
	op_test wc-l "-105 226 65 184 133 142 72 48 200 153 -54 -119 57 -52 182 188 157 93 -12 105 132 -131 -230 207 125 147 50 237 55 -215 193 144 -82 82 109 174 -245 150 -61 37 24 96 75 79 -172 165 235 137 158 -139 -97 4 -192 126 -249 -186 -240 51 -219 242 -75 128 -193 53 23 -244 -229 -102 141 139 216 -202 164 -238 -199 176 -78 -205 85 -19 -40 186 -63 234 211 -147 172 -149 -234 -135 222 -33 -157 116 -250 -123 -233 -2 154 -145 -49 -136 -86 -121 6 35 166 -29 112 -220 -224 134 87 107 205 -107 140 -53 33 -34 27 89 -122 -226 127 -208 52 -169 104 -207 -42 123 -81 -200 84 12 -165 -132 162 202 -124 -197 239 201 64 210 20 220 -7 212 32 -235 -218 22 5 88 -195 -14 -174 246 131 149 -247 -43 -77 47 -182 54 -36 69 73 136 67 -88 -167 -128 241 117 209 -201 -110 16 -104 -188 98 -183 146 194 34 -106 -4 159 -203 -87 -17 225 -95 31 244 -223 206 -35 217 -166 -198 -231 -109 -68 94 -79 58 -15 -48 56 250 -221 197 -25 -76 189 38 -47 118 2 249 -152 229 -117 -115 -241 -69 247 -222 177 -116 106 -179 -99 49 -168 -103 191 0 -38 -96 115 -248 -89 -143 187 230 13 -187 -74 -146 -3 -206 -239 223 8 -227 -65 59 195 -39 -93 -211 -155 99 -8 221 238 -158 -190 203 -108 -159 179 108 -212 74 -83 -113 -156 -237 -181 -58 -177 -180 -55 -138 97 180 -176 -185 44 190 161 171 100 -184 60 167 -243 11 -26 121 101 36 -194 86 -41 -214 19 -225 120 178 -100 -144 233 -171 -60 113 -21 183 156 -127 119 -56 169 28 243 95 -50 91 198 -150 -210 138 102 -164 -111 15 135 -9 151 196 236 231 -148 227 -6 -246 83 248 68 -216 3 -28 110 66 129 -161 -114 -191 -204 -134 26 -5 103 -20 -175 9 7 219 41 111 245 -1 -71 232 -90 -151 -13 76 40 -98 155 -73 -120 -62 -94 -72 -173 -118 213 -133 199 -18 -80 -170 168 215 163 -130 -140 78 -141 -64 181 29 61 21 -153 46 92 208 -67 39 -196 -137 -44 -178 77 90 122 152 175 170 -24 -209 114 43 -126 -30 18 160 -46 -101 -84 -32 143 185 -10 -37 -213 -160 228 173 -57 148 25 240 -45 -85 -142 70 -242 -59 -92 80 17 63 71 45 -162 204 -31 14 -51 30 -11 214 -154 -189 -22 124 -129 -16 42 -232 -91 145 -217 -125 -70 192 1 -27 10 -23 -163 81 218 -236 62 -66 -228 -112 130" "printf "11500""
	op_test wc-l "-144 -34 -65 -225 45 84 -159 169 -232 -58 -78 43 -76 222 138 122 -1 -96 -190 -222 23 -55 105 -234 38 -220 -60 147 -103 204 66 -250 -66 179 -116 -214 -207 -229 -21 178 -107 -188 35 162 -81 244 101 99 -49 9 196 104 199 186 -184 229 6 164 -241 142 -198 -45 125 22 -236 -134 137 70 57 63 -2 74 -141 180 234 -110 140 -138 -228 -178 -187 -147 48 -199 -113 -87 -95 -160 -157 28 83 212 -52 -111 -109 156 94 -50 -13 -84 136 55 131 56 225 51 -17 -155 188 124 187 206 52 235 29 233 -4 -102 3 68 -161 -238 -100 87 -212 -101 111 75 -22 139 -146 -53 -175 -33 200 -20 0 -67 -19 -163 -249 135 153 -46 249 -7 -125 -158 -18 12 -106 238 16 -215 96 171 231 19 -196 -172 106 93 157 -173 -30 -57 166 181 191 92 113 -143 -26 118 5 220 126 97 -69 10 69 176 161 91 -115 -14 175 174 -62 -112 -86 -124 -177 -210 -192 -148 -244 -235 160 -211 -162 -23 247 13 192 -182 50 80 -89 -94 127 -193 154 -202 86 219 -97 248 216 -226 30 -189 -61 -181 -93 -31 -51 -217 2 -79 36 -133 -121 -154 214 -153 246 110 -213 72 -90 250 134 201 218 152 215 115 237 226 151 -28 150 64 130 21 -64 11 -183 242 167 15 -32 148 -128 -137 -248 -151 -42 211 221 -200 119 27 -27 59 217 88 190 95 -201 193 114 -208 -168 -85 -191 -230 33 85 165 224 -164 -120 82 -105 -6 -227 107 -48 202 34 -231 236 195 -36 -209 -16 189 -41 14 32 -73 -24 185 78 -104 103 -223 89 -77 159 239 -142 112 41 37 227 -186 -80 -11 123 -108 -44 -8 -5 -165 -39 65 -140 100 102 -204 -131 128 117 79 60 54 -167 172 243 17 -99 -129 -156 -185 109 241 -240 98 209 203 -98 -216 -118 155 -54 -245 -171 146 -206 -195 168 73 26 -72 223 20 213 -139 210 -119 -170 -10 240 -56 24 -15 7 -247 245 -63 -70 116 -132 133 -239 -40 77 81 -127 61 -37 -176 -233 149 58 -9 -122 76 -123 -68 -224 207 -136 232 121 -203 -166 -179 42 -47 -169 163 198 25 4 -152 -71 158 132 -3 -12 -126 230 -83 8 -135 108 -88 53 205 49 -246 47 184 -243 183 -114 177 -117 194 -149 -25 -29 -205 40 18 -150 173 39 145 -197 -180 208 -237 144 -35 31 143 -38 129 46 -219 170 197 -74 -242 62 -82 -194 -221 -174 44 90 228 120 67 -130 -59 -75 1 -218 -92 -145 -43 71 182 141" "printf "11500""
	op_test wc-l "-187 198 225 -174 188 -185 -161 -197 61 -218 161 97 158 103 177 10 -129 45 -114 178 -85 -53 -108 137 -36 49 -95 -1 206 -69 -45 159 -169 128 115 -182 -41 166 187 -30 -221 -34 117 85 186 185 74 -73 -179 155 71 22 -234 130 46 214 55 7 42 -233 220 -127 234 -29 82 -22 207 5 192 246 -116 -25 -35 -159 -230 132 -212 33 237 -88 -125 -4 146 221 -19 44 -61 -111 194 -232 -184 -83 -146 -173 215 -3 -56 -49 54 41 60 34 19 0 62 201 -68 -143 87 11 -100 -113 -175 113 248 4 -104 -132 -20 -14 -78 -136 231 -33 171 -220 -28 153 81 -153 -126 -43 -87 48 141 157 56 211 110 176 -31 -24 -79 239 247 -246 -201 152 92 9 -64 21 40 184 -229 230 -40 148 -90 -148 189 -2 -57 -48 -170 -123 -149 -168 -81 -63 -239 200 135 179 209 -86 -202 -228 -109 59 -58 102 169 -208 121 174 27 -47 172 -192 131 -145 -217 -66 -46 196 -60 -18 72 8 64 -38 -7 35 28 -206 -241 118 202 12 -110 -245 -226 -193 67 -160 -52 -11 -196 89 43 160 -158 126 69 31 -103 96 83 -181 -223 6 14 -156 -124 -51 -167 -96 47 140 154 16 224 -106 -91 199 -235 -16 53 37 -240 32 -213 -122 240 111 38 36 30 93 106 -17 149 -190 245 250 129 76 90 205 -62 -141 -147 -166 -154 63 -162 -222 165 -183 -227 120 -186 162 -242 58 -121 98 25 -128 -77 249 238 -194 -133 163 -163 167 -44 66 -203 -119 -165 -215 182 91 -102 -238 242 139 -155 -224 -94 -10 2 216 164 50 -84 -115 222 228 -151 229 170 114 193 109 -23 18 -189 107 -107 218 -72 -138 13 119 -195 -8 88 65 -101 -199 -188 -142 -243 180 125 -92 191 134 -89 217 -55 233 101 203 -71 -27 -216 -32 105 175 -82 144 99 -209 23 -140 75 -93 -118 183 100 232 -120 68 226 -244 173 29 223 -15 -157 -250 104 156 181 122 -237 133 -247 77 -211 -150 -131 51 -172 -236 3 -214 127 -9 -152 -144 204 243 -248 124 213 -39 -191 -59 150 -225 70 80 52 15 108 -200 -54 -204 -178 95 -112 -76 244 208 20 -231 -219 -74 -171 -137 -134 -176 -50 -65 17 -12 -21 -80 210 168 84 195 -130 24 143 -67 -26 112 -13 -37 -177 241 -5 26 -205 212 -135 78 1 145 147 -99 79 94 -139 86 -70 -98 -198 57 -249 39 116 -75 190 -180 151 -97 73 123 -207 235 -42 -164 -117 136 236 -6 219 138 -210 -105 227 142" "printf "11500""
	op_test wc-l "190 -493 -292 188 -159 -498 -172 421 -349 -79 403 -235 -358 445 -341 -148 113 495 334 305 74 224 -193 -212 -40 411 -38 -369 424 338 -51 -475 499 -276 172 -168 -114 195 138 458 -471 176 119 -234 472 -424 226 -355 -442 178 393 460 310 436 288 -347 -18 369 -371 413 360 -169 -200 -228 -345 -401 -290 -237 -469 355 248 120 73 167 443 -339 372 -125 135 -239 126 -397 216 48 444 101 -483 335 -115 44 202 439 -308 102 -450 87 405 -130 -65 -106 -232 -407 -386 431 174 332 124 448 -310 -66 371 463 85 183 -322 -258 -222 291 -180 169 -418 227 394 -89 270 -396 -84 -327 196 232 30 243 -246 56 -489 157 -272 -445 16 -71 435 -359 116 -477 78 -194 453 427 79 81 -211 8 408 -333 -382 6 -337 465 62 215 72 61 278 -306 -392 -437 -226 203 437 -425 219 496 284 26 -100 -63 -380 -399 -436 -110 18 9 66 480 223 -261 -298 -277 318 401 -311 279 -389 245 491 -195 -391 105 -103 -181 97 457 380 156 -107 -460 130 -441 43 -14 373 150 -37 313 173 -423 301 210 -138 498 -303 452 -439 414 358 163 -97 -430 249 -476 -410 -25 419 -72 354 -426 430 -190 265 -294 293 260 51 19 -44 -134 -300 348 336 -206 -313 109 212 -434 -247 251 230 71 -122 -343 -496 22 191 38 261 -480 331 -364 -251 -111 -279 -189 -421 422 -137 257 -162 27 -176 -455 -408 359 31 41 -458 312 341 94 481 -427 -463 -357 323 -4 -304 347 -12 54 -192 -432 58 -179 -187 -49 -173 -77 117 353 236 32 -82 -454 392 231 489 -486 -43 345 -379 -165 406 309 -216 59 -270 -361 -467 459 111 326 272 -296 -22 108 -388 83 -133 90 -440 229 -53 -260 -145 147 266 476 -83 314 -213 154 -468 -376 486 282 -231 145 152 -319 -350 -344 -155 -287 -175 366 -56 -403 -271 182 104 52 264 -13 -29 -395 -317 370 304 96 -142 267 255 368 -492 -214 -281 -248 -415 141 -140 -7 -353 450 361 -269 -78 324 -135 -233 -244 307 -453 -241 -45 -372 -144 -88 144 240 -42 -116 40 55 -156 -402 -164 -207 -301 164 -262 308 344 -199 -127 412 -129 398 -268 211 -461 333 -307 -74 -383 415 -17 131 479 -86 397 121 -381 -104 146 222 385 -404 471 217 -126 253 247 -289 -1 -332 395 -488 -320 -478 -8 376 21 316 -435 -267 268 -96 -299 -479 -76 482 177 -3 469 -203 280 204 390 200 -28 -457 273 181 -201 -174 -385 378 103 235 153 483 114 -26 500 416 -197 -312 -373 -419 127 389" "printf "11500""
	op_test wc-l "-117 -77 357 -220 367 98 456 -384 223 -160 172 -92 -315 472 194 3 -61 -5 -482 -199 -110 433 -72 -241 -454 -58 -467 -88 -380 -251 -278 -456 -106 37 -330 -463 -381 -411 106 328 141 198 -102 315 -375 -30 -183 -365 -114 144 -25 -405 75 -187 -208 -248 203 -407 -395 199 150 -133 -421 309 -402 180 22 -301 211 -91 -333 499 58 -351 -115 -500 -36 -462 -356 495 160 385 -363 221 428 -432 453 26 -203 -337 20 245 387 247 -112 -342 -497 -253 -122 -386 -209 -453 301 162 -39 -304 494 73 41 -93 -173 -154 -316 -244 -439 -335 17 -26 375 264 485 376 231 178 -396 213 6 -80 -328 46 317 -275 101 253 431 -429 142 -297 -373 -116 227 455 421 -498 326 -488 -138 119 -35 -18 -478 89 217 305 -125 207 440 -165 -41 -195 419 163 149 -317 295 -398 222 -164 5 57 -247 395 266 -354 84 259 -464 -368 -141 -153 -83 -246 -34 -273 121 -14 112 -350 -46 -281 -366 110 -271 68 498 391 236 -305 297 -75 -87 -385 -415 468 138 103 -33 168 -282 -425 -484 24 374 351 -2 135 -374 171 196 314 -197 -290 193 179 -146 120 -485 173 40 49 -377 430 340 310 48 244 476 -397 -50 228 27 -95 52 -4 -389 187 -150 481 -28 -31 109 -412 -123 34 411 414 64 346 -49 487 477 285 -279 -387 152 -159 473 304 390 50 -376 158 280 249 -294 -52 -267 -3 -29 -17 -59 -135 96 267 -162 176 464 -139 -216 140 177 95 114 447 -104 218 99 -38 -459 -352 104 -68 9 -131 426 286 377 155 321 -451 350 -144 -64 333 -264 -229 77 21 452 -243 240 4 288 -276 -8 -417 380 206 260 402 308 -53 -308 -310 -487 -300 -390 2 67 239 -40 44 -378 -67 427 -358 -269 -99 475 131 -473 273 488 -311 -107 283 394 -51 129 349 -185 -137 -295 406 -212 -108 417 -334 -238 237 71 -496 -283 -217 -90 465 -336 85 289 -132 -1 242 243 460 -129 -391 325 42 251 -96 388 -388 -232 -477 -9 102 -393 423 318 272 -326 35 296 -409 29 -490 93 13 248 -353 -186 -79 -418 -32 -355 -419 353 174 257 -22 457 82 262 -222 -491 154 -472 -210 254 -460 441 87 -435 100 438 398 -43 -254 -486 -231 393 -318 -474 -193 170 -270 263 80 -219 -47 454 -471 429 478 241 323 45 -298 139 83 -320 79 175 413 451 -161 467 204 -172 235 184 368 450 47 364 -145 299 -205 -470 343 316 -121 -433 -245 -265 292 408 330 -42 -357 224 -24 -434 269 410 -86 -204 -207 -168 400" "printf "11500""
}

function main()
{
	make re -C ${MYPATH}
	error_test
	valid_test
	operation_test
}

main
